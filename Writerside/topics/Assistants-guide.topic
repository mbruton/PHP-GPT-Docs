<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Assistants guide" id="Assistants-guide">
    <card-summary>Comprehensive guide to working with assistants.</card-summary>
    <p>
        Assistants are a beta feature of the OpenAI api which allows for the creation
        of assistants that can be tasked to do specific things.
    </p>
    <p>
        Assistants are a little more complex to use because there are multiple steps
        required to create and then use.
    </p>
    <p>
        Once created an assistant can be reused over and over, this allows us to do things
        such as create a math tutor and maintain independent threads for each user.
    </p>
    <p>
        Threads are created independently to the assistant and represent a conversation between
        a user (or application) and one or more assistants.
    </p>
    <p>
        The thread will contain all the messages in the conversation which are retained
        over time by the OpenAI api.
    </p>
    <p>
        Once an assistant has been created, we need to create a thread with our message to the
        assistant.
    </p>
    <p>
        Once we've created the thread, we need to create a run to execute the thread against
        the assistant, which will result in the assistant attaching a new message to the
        thread.
    </p>
    <p>
        Here is a quick example of creating and using an assistant that translates all messages it
        receives into Spanish.
    </p>
    <code-block lang="php">
        // Create the assistant
        $assistantId = (string) AI::createAssistant('Spanish translator')
            ->description('Translates messages into Spanish')
            ->instructions('Translate all user messages into Spanish.');

        // Create a thread with a new message that will be translated
        $threadId = (string) AI::createThread('Hello!');

        // Execute the thread against the assistant
        $translation = (string) AI::createRun($assistantId, $threadId);
    </code-block>
    <p>
        If we were creating a chat service, we can add a new message to the
        thread at a later time to continue the conversation.
    </p>
    <code-block lang="php">
        // Add a new message
        $messageId = (string) AI::createMessage($threadId)
            ->content('How are you?');

        // Execute the thread to obtain the next response
        $nextResponse = (string) AI::createRun($assistantId, $threadId);
    </code-block>
    <p>
        Threads and assistants are retained within OpenAI until you specifically delete them.
    </p>
    <code-block lang="php">
        $response = AI::deleteThread($threadId)->execute();
        $response = AI::deleteAssistant($assistant)->execute();
    </code-block>
    <chapter id="assistants-guide-tools" title="Tools">
        <p>
            Tools are a powerful feature of assistants, we can use tools to analyse documents,
            to execute code and to execute local PHP functions.
        </p>
        <p>
            Using tools we can empower an assistant to do almost anything we like, for example
            you could create a function that allows the assistant to retrieve and analyse
            content directly from the internet.
        </p>
        <chapter id="assistants-guide-tools-retrieval" title="Retrieval tool">
            <p>
                The retrieval tool allows the assistant to read and obtain information from
                documents.
            </p>
            <p>
                We need to enable retrieval on the assistant before we are able to use it.
            </p>
            <code-block lang="php">
                $assistantId = (string) AI::createAssistant('Document analyser')
                    ->description('Analyses documents.')
                    ->instructions('You answer questions about any files available.')
                    ->useRetrieval();
            </code-block>
            <p>
                We can attach files in one of two ways, either to the assistant or to
                the current message in the thread.
            </p>
            <p>
                Additionally, there are two ways to attach files themselves, you can use
                a file ID from a previously uploaded file, or you can provide a local path
                to a file which will be uploaded automatically for you.
            </p>
            <code-block lang="php">
                // Attach files to the assistant
                $assistantId = (string) AI::createAssistant('Document analyser')
                    ->description('Analyses documents.')
                    ->instructions('You answer questions about any files available.')
                    ->useRetrieval()
                    ->useFile('/local/path/doc.pdf')
                    ->useFileId('some-file-id');

                // Attach files to the message
                $messageId = (string) AI::createMessage($threadId)
                    ->content('Search the documents for so and so')
                    ->useFile('/local/path/doc.pdf')
                    ->useFileId('some-file-id');
            </code-block>
            <p>
                Once a file has been uploaded to OpenAI it can be used elsewhere by using
                the file ID.
            </p>
            <p>
                Because of this the response for the create assistant call will contain
                the file ID for any files that were uploaded during the request.
            </p>
            <p>
                Basically any file that was specified using the <code>useFile()</code> method.
            </p>
            <p>
                Using the method <code>getUploadedFiles()</code> will return an array of file
                ID's with the key being the local file path.
            </p>
            <p>
                Or using the method <code>getUploadedFile($path)</code> we can specify the local
                path to obtain the file ID.
            </p>
            <code-block lang="php">
                // Attach files to the assistant
                $response = AI::createAssistant('Document analyser')
                    ->description('Analyses documents.')
                    ->instructions('You answer questions about any files available.')
                    ->useRetrieval()
                    ->useFile('/local/path/doc.pdf')
                    ->useFileId('some-file-id')
                    ->execute();

                // Get the file ID's
                $files = $response->getUploadedFiles();

                // Attach files to the message
                $response = AI::createMessage($threadId)
                    ->content('Search the documents for so and so')
                    ->useFile('/local/path/doc.pdf')
                    ->useFileId('some-file-id')
                    ->execute();

                // Get a file ID
                $fileId = $response->getUploadedFile('/local/path/doc.pdf');
            </code-block>
        </chapter>
        <chapter id="assistants-guide-tools-code-interpreter" title="Code interpreter">
            <p>
                The code interpreter tool allows the assistant to execute code in order
                to respond to requests.
            </p>
            <p>
                The code generated is Python, and it is executed in a sandbox environment
                within OpenAI's platform.
            </p>
            <p>
                When enabled the assistant is able to use the sandbox to write and execute
                code in order to response to requests.
            </p>
            <p>
                For example, asking a complex mathematical question might result in the
                assistant writing code to solve the problem.
            </p>
            <p>
                When enabled the code interpreter can also access any files available to
                the assistant allowing for complex data retrieval and manipulation.
            </p>
            <p>
                To enable the code interpreter we simply need to enable it on the assistant.
            </p>
            <code-block lang="php">
                // Create an assistant that can write and execute code
                $assistantId = (string) AI::createAssistant('Problem solve')
                    ->description('Solves complex problems.')
                    ->instructions('You solve problems by writing and executing code.')
                    ->useCodeInterpreter();
            </code-block>
        </chapter>
        <chapter id="assistants-guide-tools-function-calling" title="Function calling">
            <p>
                Function calling allows us to define local PHP functions that can be
                executed via the assistant to enable it to perform actions within
                your application.
            </p>
            <p>
                This creates limitless possibilities, we can for example create a function
                that accepts a URL as a parameter and returns the content of the webpage,
                effectively giving the assistant internet access.
            </p>
            <warning title="Important information">
                <p>
                    OpenAI allows functions to be attached to the assistant or to the run.
                </p>
                <p>
                    PHP-GPT technically supports both, however, in practice this only works
                    if it is attached to the run.
                </p>
                <p>
                    If you want to use function calling, please attach it only to the run.
                </p>
            </warning>
            <p>
                Read <a href="Function-calling.topic"/> for an in depth guide to this feature.
            </p>
            <p>
                In this simple example we will create a function that will allow the assistant
                to access the current date.
            </p>
            <code-block lang="php">
                // Get the create run builder
                $builder = AI::createRun($assistantId, $threadId);

                // Create a function to obtain the date
                $builder->useFunction(function (FunctionBuilder $functionBuilder) {
                    // Define the function
                    $functionBuilder->name('getDate')
                        ->description('Returns the current date.');

                    // Create the function
                    $functionBuilder->function(
                        fn() => date('Y-m-d)
                    );
                });

                // Execute the run
                $response = $builder->execute();
            </code-block>
        </chapter>
    </chapter>
</topic>