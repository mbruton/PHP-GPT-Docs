<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="listRuns()" id="listRuns">

    <p>
        Lists the runs against a thread. See the <a href="Assistants-guide.topic"/> for
        more information.
    </p>
    <chapter id="listRuns-basic" title="Basic usage">
        <p>
            You can obtain the last 20 runs for the thread without any configuration
            with the following.
        </p>
        <code-block lang="php">
            $response = AI::listRuns($threadId)->execute();

            foreach ($response->getRuns() as $run) {
                // ...
            }
        </code-block>
    </chapter>
    <chapter id="listRuns-builder" title="Builder">
        <chapter id="listRuns-builder-thread" title="thread()">
            <p>
                Used to specify the thread to obtain the runs for, required.
            </p>
            <code-block lang="php">
                $builder = AI::listRuns($threadId);
                // Or
                $builder = AI::listRuns()
                    ->thread($threadId);
            </code-block>
        </chapter>
        <chapter id="listRuns-builder-limit" title="limit()">
            <p>
                Limits the number of items to be returned, defaults to 20. Must be between
                1 and 100.
            </p>
            <code-block lang="php">
                $builder = AI::listRuns($threadId)
                    ->limit(100);
            </code-block>
        </chapter>
        <chapter id="listRuns-builder-ascending" title="ascending()">
            <p>
                Can be used to sort the results by the creation date.
            </p>
            <code-block lang="php">
                // Ascending
                $builder = AI::listRuns($threadId)
                    ->ascending();

                // Descending
                $builder = AI::listRuns($threadId)
                    ->ascending(false);
            </code-block>
        </chapter>
        <chapter id="listRuns-builder-after" title="after()">
            <p>
                Used to return results after the given ID.
            </p>
            <code-block lang="php">
                $builder = AI::listRuns($threadId)
                    ->after('some-id');
            </code-block>
        </chapter>
        <chapter id="listRuns-builder-before" title="before()">
            <p>
                Used to return results before the given ID.
            </p>
            <code-block lang="php">
                $builder = AI::listRuns($threadId)
                    ->before('some-id');
            </code-block>
        </chapter>
    </chapter>
    <chapter id="listRuns-response" title="Response">
        <p>
            When the response is used as a string it returns the ID of the last item in
            the list.  This can be useful for working with pagination as you can use this
            ID with the <code>after()</code> or <code>before()</code> methods of
            the builder to obtain the next set.
        </p>
        <code-block lang="php">
            $totalPerPage = 50;
            $builder = AI::listRuns($threadId)
                ->limit($totalPerPage);

            $response = $builder->execute();
            while ($response->getRunCount() != $totalPerPage) {
                // ...

                // Get the next results
                $response = $builder->after((string) $response)
                    ->execute();
            }
        </code-block>
        <chapter id="listRuns-response-getRunCount" title="getRunCount()">
            <p>
                Returns the number of items in the collection that have been returned.
            </p>
            <code-block lang="php">
                $itemCount = $response->getRunCount();
            </code-block>
        </chapter>
        <chapter id="listRuns-response-getRuns" title="getRuns()">
            <p>
                Returns a <code>RunCollection</code>.
            </p>
            <p>
                The run collection can be converted to an array with the <code>toArray()</code>
                method.
            </p>
            <p>
                The collection contains a list of <code>Run</code> objects which has the same
                properties as the OpenAI run specification.
            </p>
            <p>
                You can also convert an individual run to an array with the <code>toArray()</code>
                method.
            </p>
            <code-block lang="php">
                foreach ($response->getRuns() as $run) {
                    echo 'ID: ' . $run->id . PHP_EOL;
                    echo 'Status: ' . $run->status . PHP_EOL;
                }
            </code-block>
        </chapter>
    </chapter>
    <seealso>
        <category ref="guides">
            <a href="Assistants-guide.topic"/>
        </category>
        <category ref="services">
            <a href="Assistant-service.topic"/>
            <a href="Audio-services.topic"/>
            <a href="Chat-services.topic"/>
            <a href="File-services.topic"/>
            <a href="Image-services.topic"/>
        </category>
        <category ref="service-assistants">
            <a href="Assistants.topic">Assistants</a>
            <a href="Messages.topic">Messages</a>
            <a href="Runs.topic">Runs</a>
            <a href="Threads.topic">Threads</a>
        </category>
        <category ref="service-assistants-runs">
            <a href="createRun.topic">Create run</a>
            <a href="cancelRun.topic">Cancel run</a>
<!--            <a href="listRuns.topic">List runs</a>-->
            <a href="listRunSteps.topic">List run steps</a>
            <a href="retrieveRun.topic">Retrieve run</a>
            <a href="retrieveRunStep.topic">Retrieve run steps</a>
            <a href="modifyRun.topic">Modify run</a>
        </category>
    </seealso>
</topic>